Changes made to windmill-rs.md:

Date: 2025-07-07
Change 1: Added agent name and agent mode to Profile section

Details:
- Added "agent_name: August" to the Profile section
- Added "agent_mode: August" to the Profile section
- These additions were made at the beginning of the Profile section, before the existing language field
- No other content was modified

Lines affected: 3-16 (Profile section)

Change 2: Added Test Module Guidelines to Rules section

Details:
- Added new rule section "6. Test Module Guidelines" to the Rules section
- Includes guidelines for minimal testing approach: create only ONE test function for happy case unless specifically requested
- Specifies that additional tests should only be added when main function parameters change or when explicitly requested
- Emphasizes test focus on validating main function's core functionality

Lines affected: 72-86 (Rules section)

Change 3: Enhanced Test Module Guidelines with library context clarification

Details:
- Added "Library Testing Purpose" explanation clarifying that Windmill scripts are libraries without traditional main entry points
- Explained that test modules serve as the primary method to run and verify main function behavior during development
- Enhanced the testing rationale to reflect the library nature of Windmill scripts
- Clarified that tests serve as the execution verification method in the library context

Lines affected: 81-90 (Rules section - Test Module Guidelines)

Change 4: Added comprehensive Windmill Platform Limitations and Constraints section

Details:
- Added new rule section "7. Windmill Platform Limitations and Constraints" to the Rules section
- Covers 10 major constraint categories based on Windmill documentation research:
  * Single File Architecture limitations (no modules/mod declarations)
  * Dependency Declaration Constraints (inline Cargo.toml only)
  * Compilation Mode Limitations (debug vs release mode differences)
  * Shared Build Environment implications (cache efficiency vs dependency conflicts)
  * Worker Resource Constraints (CPU/memory/timeout limits)
  * Function Signature Restrictions (strict main function requirements)
  * No Standard Library Main (library execution context)
  * Caching Dependencies (performance implications)
  * Limited File System Access (sandboxed environment)
  * Network and Security Constraints (restricted system access)
- Provides developers with comprehensive understanding of platform constraints for better script design
- Helps prevent common issues and misunderstandings about Windmill's execution environment

Lines affected: 93-114 (Rules section - new Windmill Platform Limitations section)

Change 5: Added comprehensive Windmill Script Writing Best Practices section

Date: 2025-07-07

Details:
- Added new major section "Windmill Script Writing Best Practices" based on official Windmill documentation
- Inserted between "Input Parameter Definitions" and "Workflows" sections
- Contains 10 comprehensive categories of best practices:

  1. Function Structure and Signature
     - Main function requirement and entry point guidelines
     - Type annotation importance for UI generation
     - Return type specifications for JSON serialization
     - Parameter documentation using doc comments

  2. AI Assistant Integration
     - Effective prompting strategies for Windmill AI
     - Language preferences (Python/TypeScript particularly effective)
     - Context provision for better code generation

  3. Dependency Management
     - Top-level import placement in comment headers
     - Automatic dependency resolution understanding
     - Version specification for compatibility

  4. Error Handling and Validation
     - Comprehensive error handling with anyhow::Result
     - Input validation before processing
     - Schema validation options

  5. Performance Optimization
     - Async programming patterns for I/O operations
     - Resource management and cleanup
     - Memory efficiency considerations
     - Caching awareness

  6. Security Best Practices
     - Secure communications with rustls-tls
     - Resource system usage for credentials
     - Input sanitization requirements

  7. UI and User Experience
     - Parameter customization through Generated UI
     - Optional parameter handling with Option<T>
     - Meaningful naming conventions
     - Default value provision

  8. Testing and Development
     - Instant preview utilization
     - Test module creation guidelines
     - Iterative development understanding

  9. Integration Patterns
     - Resource integration for external services
     - Variable and secret management
     - Flow composition design principles

  10. Documentation and Maintenance
      - Inline documentation requirements
      - Version control understanding
      - Community sharing considerations

Source Information:
- Compiled from official Windmill documentation including:
  * Windmill AI documentation (https://www.windmill.dev/docs/core_concepts/ai_generation)
  * Python quickstart guide (https://www.windmill.dev/docs/getting_started/scripts_quickstart/python)
  * TypeScript quickstart guide (https://www.windmill.dev/docs/getting_started/scripts_quickstart/typescript)
  * Code assistants documentation (https://www.windmill.dev/docs/code_editor/assistants)

Lines affected: 286-360 (new Windmill Script Writing Best Practices section)

Change 6: Enhanced Workflows section with best practices integration

Details:
- Updated existing workflow steps to incorporate newly added best practices
- Enhanced Step 1: Added comprehensive type annotations and parameter design considerations
- Enhanced Step 2: Included dependency management best practices reference
- Enhanced Step 3: Added comprehensive error handling with anyhow::Result and secure API integration
- Enhanced Step 4: Included default values and enhanced user experience considerations
- Enhanced Step 5: Added input validation and meaningful error messages
- Enhanced Step 6: Included async patterns, efficient data structures, and resource management
- Enhanced Step 7: Added testing using instant preview and documentation requirements
- Updated Expected result: Added compliance with best practices and enhanced documentation requirements

Lines affected: 286-360 (updated Workflows section)

Change 7: Enhanced Test Module Guidelines with Versioned Testing Strategy

Date: 2025-07-07

Details:
- Added comprehensive "Versioned Testing Strategy" subsection to existing Test Module Guidelines (Rule 6)
- Introduced systematic approach for handling test evolution when main function parameters change:
  * Version-based test naming convention (test_main_v2, test_main_v3, etc.)
  * Backward compatibility maintenance for existing test versions
  * Default value handling for new optional parameters in older tests
  * Descriptive version naming reflecting parameter changes
  * Documentation requirements for parameter evolution tracking
- Ensures robust testing practices that accommodate function signature evolution while maintaining test suite integrity
- Addresses the specific need for handling parameter changes without breaking existing test functionality
- Provides clear guidelines for test versioning that parallel function versioning in development workflows

Lines affected: 81-98 (Rules section - Test Module Guidelines enhancement)

Change 8: Major Multi-Language Expansion

Date: 2025-07-08

Details:
- Completely transformed the prompt from Rust-specific to multi-language support covering TypeScript Node.js, Python, Golang, and Rust
- This represents the most significant update to the prompt, expanding its scope and utility dramatically

Major sections updated:

1. Role and Profile Section (Lines 1-16):
   - Changed title from "Windmill Rust Script Developer" to "Windmill Multi-Language Script Developer"
   - Updated description to include TypeScript Node.js, Python, Golang, and Rust
   - Expanded expertise to cover all four languages and cross-language integration patterns
   - Enhanced background to include multiple runtime environments

2. Skills Section Complete Rewrite (Lines 18-69):
   - Added dedicated subsections for each language:
     * TypeScript Node.js Development (async/await, Bun runtime, npm/yarn/pnpm)
     * Python Development (asyncio, pandas/numpy, pip/poetry, pydantic)
     * Golang Development (goroutines, channels, go modules, performance)
     * Rust Development (tokio, memory safety, Cargo ecosystem)
   - Enhanced Windmill Platform Expertise to cover multi-language support
   - Updated Serverless and API Integration for language-specific HTTP clients
   - Maintained AI Tool Integration with cross-language considerations

3. Rules Section Major Expansion (Lines 71-195):
   - Transformed Code Architecture Principles to be language-agnostic with language selection guidance
   - Added comprehensive Language-Specific Development Best Practices for each language
   - Updated Universal Windmill Platform Constraints while adding language-specific constraint sections
   - Enhanced Performance and Security Guidelines with language-specific recommendations
   - Updated Test Module Guidelines to include language-specific testing approaches
   - Expanded Windmill Platform Limitations to cover all four languages with detailed constraints

4. Input Parameter Definitions Complete Overhaul (Lines 197-707):
   - Added comprehensive type mapping tables for all four languages
   - Provided multi-language examples for required vs optional parameters
   - Updated Advanced Parameter Settings to be language-agnostic
   - Created multi-language examples for Special Windmill Types
   - Added language-specific Dynamic Select Parameters examples
   - Included multi-language Backend Schema Validation examples
   - Enhanced Parameter Documentation with language-appropriate patterns

5. Best Practices Section Transformation (Lines 709-840):
   - Made all practices applicable across languages while maintaining language-specific guidance
   - Added language-specific documentation patterns and dependency management
   - Enhanced AI Assistant Integration with language selection guidance
   - Updated Error Handling and Performance Optimization with language-specific approaches
   - Maintained universal security practices while adding language-specific implementations
   - Enhanced Testing and Development with language-specific testing frameworks

6. Workflows Section Complete Redesign (Lines 842-893):
   - Added language selection as the first critical step
   - Made all workflow steps language-agnostic while providing language-specific implementation guidance
   - Enhanced each step with multi-language considerations and best practices
   - Updated expected results to cover all supported languages

7. Initialization Section Update (Lines 895-897):
   - Updated role from "Rust Script Developer" to "Multi-Language Script Developer"
   - Added emphasis on language selection and cross-language compatibility

Technical Implementation Details:
- Maintained backward compatibility for existing Rust-focused usage
- Added comprehensive language-specific examples and patterns
- Ensured all code examples follow language conventions and best practices
- Integrated Windmill platform constraints for each language runtime
- Preserved the core structure and principles while dramatically expanding scope

Impact:
- Transforms the prompt from single-language to comprehensive multi-language support
- Enables AI to write high-quality scripts in TypeScript Node.js, Python, Golang, and Rust
- Provides language selection guidance based on requirements and use cases
- Maintains all existing Rust capabilities while adding three additional languages
- Significantly increases the prompt's utility and applicability for diverse development scenarios

Lines affected: Entire file (1-897) - comprehensive multi-language transformation

Change 9: Research-Based Validation and Critical Corrections

Date: 2025-07-08

Details:
- Conducted comprehensive web research using official Windmill documentation to validate and enhance the multi-language prompt
- Identified and corrected several critical inaccuracies in the initial multi-language expansion
- Updated prompt with current, accurate information based on official Windmill documentation

Major Research Findings and Corrections:

1. **Critical Runtime Correction**:
   - CORRECTED: Changed "TypeScript Node.js" to "TypeScript (Bun Runtime)" throughout the document
   - FINDING: Windmill primarily uses Bun as the TypeScript runtime, not Node.js directly
   - Node.js compatibility is available via `//nodejs` comment but is not the primary runtime
   - Updated all references to reflect Bun as the primary TypeScript runtime

2. **Language Name Standardization**:
   - CORRECTED: Changed "Golang" to "Go" throughout the document to match official documentation
   - FINDING: Official Windmill documentation consistently uses "Go" not "Golang"

3. **Dependency Management Accuracy**:
   - CORRECTED: TypeScript (Bun) dependencies are automatically resolved from imports, not comment headers
   - CORRECTED: Python dependencies are automatically resolved from top-level imports only
   - CORRECTED: Go dependencies use `//require` comments for version pinning
   - CORRECTED: Rust uses specific partial Cargo.toml format in comment headers
   - FINDING: Each language has distinct dependency management approaches

4. **Type Mapping Enhancements**:
   - ADDED: Missing TypeScript types like `bigint`, `wmill.Base64`, `wmill.Email`, `wmill.Sql`
   - ADDED: Missing Python types like `Literal`, `bytes`, `datetime`
   - ADDED: Go struct with json tags for object mapping
   - CORRECTED: More accurate type descriptions based on official documentation

5. **Runtime and Performance Details**:
   - ADDED: Bun pre-bundling information for TypeScript
   - ADDED: Go package structure requirements (`package inner`)
   - ADDED: Rust compilation mode differences (debug vs release)
   - CORRECTED: Performance optimization strategies specific to each runtime

6. **Platform Constraints Accuracy**:
   - CORRECTED: TypeScript uses ES6 imports, not comment headers for dependencies
   - CORRECTED: Python import detection limited to top-level imports only
   - CORRECTED: Go requires `package inner` declaration
   - CORRECTED: Rust includes serde by default

7. **Testing Framework Updates**:
   - ADDED: Bun's built-in test runner for TypeScript
   - CORRECTED: Language-specific testing approaches based on current capabilities

8. **Documentation Standards**:
   - CORRECTED: All language references to use official naming conventions
   - UPDATED: Best practices to reflect current Windmill capabilities
   - ENHANCED: Examples with accurate syntax and patterns

Research Sources Validated:
- Official Windmill documentation (windmill.dev/docs)
- TypeScript quickstart guide with Bun runtime details
- Python quickstart with import handling specifics
- Go quickstart with package structure requirements
- Rust quickstart with dependency declaration format
- JSON Schema and type mapping documentation
- Dependency management and imports documentation

Impact of Corrections:
- Ensures prompt accuracy with current Windmill platform capabilities
- Prevents AI from generating incorrect dependency management code
- Provides accurate runtime-specific optimization guidance
- Aligns all examples with official Windmill documentation
- Eliminates potential confusion between Node.js and Bun runtime usage

Lines affected: Multiple sections throughout the document (1-904) - research-based accuracy improvements

Change 10: Major Transformation to Spec-to-Code Development Methodology

Date: 2025-07-16

Details:
- Completely transformed the prompt from "vibe coding" approach to structured specification-driven development methodology inspired by Kiro.dev workflow
- This represents a fundamental paradigm shift from ad-hoc development to systematic spec-to-code processes

Major sections transformed:

1. Role and Profile Section (Lines 1-12):
   - Changed title from "Windmill Multi-Language Script Developer" to "Windmill Spec-to-Code Multi-Language Script Developer"
   - Updated description to emphasize spec-driven development and structured specifications
   - Enhanced background to include specification-driven methodologies, EARS notation, and requirements engineering
   - Added expertise in spec-driven development, technical architecture documentation, and requirements engineering
   - Updated target audience to focus on teams requiring structured, specification-driven development over "vibe coding"

2. Skills Section Major Enhancement (Lines 14-79):
   - Added new primary skill category "Specification-Driven Development" covering:
     * EARS Notation expertise for writing clear, testable requirements
     * Requirements Engineering for transforming vague requests into structured requirements
     * Technical Architecture Documentation for comprehensive design.md files
     * Task Decomposition for breaking down complex features into discrete tasks
     * Specification Validation for ensuring completeness before implementation
   - Enhanced existing language skills to support specification-driven approaches
   - Added new skill category "Documentation and Project Structure" covering:
     * Specification File Management for maintaining project specification files
     * Cross-File Consistency for ensuring alignment between specs and implementation
     * Version Control Integration for managing specification evolution
     * Template Creation for reusable specification patterns

3. Rules Section Comprehensive Restructuring (Lines 81-199):
   - Added new primary rule "Specification-Driven Development Workflow" covering:
     * Spec-First Approach requiring comprehensive specification documents before coding
     * EARS Requirements using "WHEN [condition] THE SYSTEM SHALL [behavior]" format
     * Architecture Documentation with detailed design.md files
     * Task Decomposition into discrete, trackable tasks
     * Specification Validation and traceability requirements
   - Added new rule "Specification File Structure and Management" defining:
     * File Organization Pattern: `/path/to/script/` directory for each script
     * Required specification files: REQUIREMENTS.md, DESIGN.md, TASK.md
     * Specification File Standards with specific formatting requirements
     * Cross-Reference and Version Control requirements
   - Enhanced existing rules to incorporate specification compliance requirements
   - Updated Test Module Guidelines to include specification-driven testing:
     * Requirements Traceability for mapping tests to EARS requirements
     * Test Coverage ensuring all requirements have corresponding test cases
     * Test Documentation with references to specific requirements

4. Workflows Section Complete Redesign (Lines 943-1015):
   - Transformed from "Multi-Language Development Process" to "Specification-Driven Multi-Language Development Process"
   - Restructured workflow to follow Kiro.dev-inspired spec-to-code methodology:
     * Step 1: Requirements Capture using EARS notation
     * Step 2: Technical Design and Architecture documentation
     * Step 3: Implementation Planning and Task Decomposition
     * Step 4: Dependency Declaration aligned with specifications
     * Step 5: Specification Validation and Approval process
     * Step 6: Implementation Execution following approved specifications
     * Step 7: Parameter Validation matching design specifications
     * Step 8: Testing and Specification Validation with EARS requirement coverage
   - Updated Expected Result to include complete specification documentation and traceability

5. Initialization Section Update (Lines 1013-1015):
   - Updated role from "Multi-Language Script Developer" to "Spec-to-Code Multi-Language Script Developer"
   - Added emphasis on specification-driven workflows and documentation requirements
   - Included transformation guidance from "vibe coding" to structured development processes

Technical Implementation Details:
- Maintains backward compatibility while adding structured development layer
- Introduces systematic approach to requirements capture, design documentation, and implementation planning
- Provides clear file organization pattern for specification management
- Ensures traceability from business requirements to implementation
- Integrates EARS notation for clear, testable requirements
- Establishes validation checkpoints throughout development process

Methodology Inspiration:
- Based on Kiro.dev's spec-driven development approach with:
  * requirements.md for user stories and acceptance criteria in EARS notation
  * design.md for technical architecture and implementation considerations
  * tasks.md for detailed implementation plan with discrete tasks
- Adapted for Windmill platform constraints and multi-language support
- Maintains focus on single-file script architecture while adding specification layer

Impact:
- Transforms prompt from supporting ad-hoc "vibe coding" to systematic specification-driven development
- Enables clear documentation and traceability for complex Windmill script projects
- Provides structured approach for teams requiring formal development processes
- Maintains all existing multi-language capabilities while adding specification methodology
- Bridges gap between business requirements and technical implementation
- Supports better collaboration between product and engineering teams through structured specifications

Lines affected: Entire file (1-1015) - comprehensive spec-to-code transformation

Change 11: Real-Time Task Status Tracking System Implementation

Date: 2025-07-16

Details:
- Added comprehensive real-time task status tracking system to enhance project visibility and accountability
- Implemented mandatory status indicators and immediate update requirements for all development tasks
- Integrated status tracking into existing spec-to-code workflow methodology

Major enhancements added:

1. Real-Time Task Status Tracking System (Lines 154-163):
   - Added mandatory status indicators section to Specification File Standards
   - Defined four standardized status indicators:
     * `[ ]` Not Started - Task has not been initiated
     * `[🔄]` In Progress - Task is currently being worked on
     * `[✅]` Completed - Task has been successfully finished
     * `[🚫]` Blocked - Task cannot proceed due to dependencies or issues
   - Established immediate status update requirements with announcement protocols
   - Implemented status tracking enforcement and progress visibility requirements

2. Dedicated Task Management Section (Lines 187-221):
   - Added comprehensive "Task Management and Real-Time Status Tracking" rule section
   - Detailed status indicator definitions with specific use cases and required actions
   - Established status update protocol with mandatory announcements:
     * Starting Task: "Starting task: [task number] - [task description]"
     * Completing Task: "Completed task: [task number] - [task description]"
     * Blocking Task: "Blocked task: [task number] - [blocking issue] - [resolution plan]"
   - Defined task documentation standards including status tracking requirements

3. Workflow Integration (Lines 1026-1032):
   - Enhanced Step 3 (Implementation Planning) to include status indicator initialization
   - Required all tasks to start with `[ ]` Not Started status indicator
   - Added real-time tracking requirements to task decomposition process

4. Implementation Execution Enhancement (Lines 1045-1058):
   - Transformed Step 6 to "Implementation Execution with Real-Time Status Tracking"
   - Added mandatory status update requirements before starting each task
   - Implemented real-time progress tracking during implementation
   - Required immediate completion updates and blocking issue management
   - Integrated status tracking with existing implementation patterns

5. Expected Results Update (Lines 1074-1084):
   - Enhanced expected results to include real-time task tracking requirements
   - Added requirement for all tasks showing `[✅]` Completed status
   - Included status tracking compliance evidence requirement
   - Added task completion audit trail showing progression from `[ ]` → `[🔄]` → `[✅]`

Technical Implementation Features:
- Standardized status indicator system for consistent tracking across all projects
- Mandatory real-time updates preventing delayed or batched status changes
- Clear announcement protocols for transparency and communication
- Blocking issue management with resolution planning requirements
- Integration with existing TASKS.md file structure
- Audit trail capability for project management and accountability

Benefits:
- Immediate visibility into development progress and bottlenecks
- Enhanced project management through real-time status tracking
- Clear accountability for task completion and blocking issues
- Improved communication through mandatory status announcements
- Better resource allocation through progress visibility
- Historical tracking of development progression for future reference

Impact:
- Transforms task management from passive documentation to active tracking system
- Provides real-time project visibility for stakeholders and team members
- Enables proactive identification and resolution of blocking issues
- Supports better project planning through historical task completion data
- Maintains compatibility with existing spec-to-code methodology while adding tracking layer

Lines affected: Multiple sections (144-163, 187-221, 1026-1032, 1045-1058, 1074-1084) - real-time status tracking integration

Change 12: Single File Implementation Enforcement

Date: 2025-07-16

Details:
- Enhanced the specification to explicitly enforce Windmill's single-file constraint
- Removed any references that might suggest creating separate files for tests or documentation
- Clarified that ALL coding must be done within a single script file only

Major clarifications added:

1. Universal Windmill Platform Constraints Enhancement (Lines 124-132):
   - Added **SINGLE FILE ONLY** constraint emphasizing no separate test files, README.md, or additional modules
   - Added **NO EXTERNAL FILES** rule explicitly prohibiting creation of README.md, separate test files, or any additional files
   - Reinforced that everything must be contained in the main script file

2. Test Structure and Organization Update (Lines 232-237):
   - Changed from creating separate test files to **SINGLE FILE TESTING ONLY**
   - Added **NO SEPARATE TEST FILES** rule requiring inline test functions or test blocks within main script
   - Added **Inline Test Implementation** guidance for language-specific inline testing patterns

3. Language-Specific Testing Approaches Revision (Lines 239-243):
   - Updated from external test runners to **Language-Specific Inline Testing Approaches**
   - TypeScript (Bun): Include test functions within main script, use console.log or conditional test execution
   - Python: Use `if __name__ == "__main__":` block for inline testing with assert statements
   - Go: Include test functions within main script using conditional compilation
   - Rust: Use `#[cfg(test)]` modules within the same file for inline testing

4. Workflow Step 8 Enhancement (Lines 1069-1076):
   - Updated to **Testing and Specification Validation (Single File Only)**
   - Added **INLINE TESTING ONLY** requirement for test functions within main script file
   - Added **NO SEPARATE TEST FILES** enforcement for all testing implementation
   - Emphasized that all EARS requirements must have test cases within the single file

5. Expected Results Update (Lines 1078-1090):
   - Added **SINGLE FILE IMPLEMENTATION** as primary requirement
   - Added **Inline test coverage** requirement for EARS requirements validation within single script
   - Added **No external files** explicit prohibition of README.md, separate test files, or additional modules

Technical Implementation Clarifications:
- All code, tests, and functionality must be contained within one script file
- No creation of README.md files or separate documentation files
- No separate test files - all testing must be inline within the main script
- Use language-appropriate inline testing patterns (conditional blocks, inline functions)
- Maintain full specification-driven development while respecting single-file constraint

Benefits:
- Clear alignment with Windmill platform constraints
- Eliminates confusion about file creation requirements
- Ensures compliance with Windmill's single-file architecture
- Maintains specification-driven development within platform limitations
- Provides clear guidance for inline testing approaches

Impact:
- Reinforces Windmill platform compliance throughout the specification
- Prevents creation of unauthorized external files
- Maintains all specification-driven development benefits within single-file constraint
- Provides clear guidance for developers familiar with multi-file development patterns
- Ensures successful deployment and execution within Windmill environment

Lines affected: Multiple sections (124-132, 232-243, 1069-1076, 1078-1090) - single file implementation enforcement
